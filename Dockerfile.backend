# Dockerfile.backend
# Utiliser une image Node.js 20 Alpine
FROM node:20-alpine AS builder

# Étape 1 : Installer les dépendances système nécessaires
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    libpq \
    bash \
    file

# Étape 2 : Mettre à jour npm à la dernière version globale
RUN npm install -g npm@latest --force

# Définir le répertoire de travail
WORKDIR /app

# Étape 3 : Copier les fichiers package.json et package-lock.json pour installer les dépendances
COPY package*.json ./

# Mettre à jour Prisma et @prisma/client à la dernière version
RUN npm install --save-dev prisma@latest @prisma/client@latest --force --legacy-peer-deps

# Étape 4 : Installer les dépendances de production
RUN npm install --production --loglevel=warn

# Étape 5 : Copier le schéma Prisma et générer le client Prisma
COPY prisma ./prisma
RUN npx prisma generate

# Étape 6 : Copier tout le code source
COPY . .

# Étape 7 : Nettoyer le cache npm pour réduire la taille de l'image
RUN npm cache clean --force

# Vérifier si server.js existe pour debug
RUN ls -l /app/server.js && file /app/server.js

# Étape finale : Créer une image allégée pour l'exécution
FROM node:20-alpine

# Copie des fichiers nécessaires depuis la phase builder
WORKDIR /app
COPY --from=builder /app /app

# Exposer le port sur lequel le backend écoute
EXPOSE 7000

# Lancer le backend
CMD ["node", "server.js"]
