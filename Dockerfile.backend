# 📁 backend/Dockerfile.backend
# =============================
# 🏗 Étape 1 : Construction
# =============================
FROM node:20-alpine AS builder

# 🔧 Installation des outils nécessaires à la compilation
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    libpq \
    bash \
    file

# ⬆️ Mise à jour de npm
RUN npm install -g npm@latest --force
RUN echo "📦 Version de npm : $(npm --version)"

# 📁 Répertoire de travail
WORKDIR /app

# 📦 Copier les fichiers de dépendances
COPY package*.json ./

# 📥 Installer les dépendances de production
RUN npm install --production --loglevel=warn

# ➕ Ajouter Prisma en dev pour le build
RUN npm install --save-dev prisma@latest @prisma/client@latest --force

# 📁 Copier le reste de l'application
COPY . .

# 🧪 Debug temporaire pour valider que le bon server.js est utilisé
RUN echo "🧪 Contenu de server.js après COPY :" && head -n 20 server.js

# 🔍 Vérification de la copie complète
RUN echo "📂 Contenu du dossier /app :" && ls -la /app

# ⚙️ Générer le client Prisma
RUN npx prisma generate

# 🧼 Nettoyage du cache npm
RUN npm cache clean --force

# =============================
# 🚀 Étape 2 : Image finale légère
# =============================
FROM node:20-alpine

# 📁 Répertoire de travail
WORKDIR /app

# 📦 Copier uniquement l’application depuis l’étape de build
COPY --from=builder /app /app

# 🟢 Définir le port via ENV (sera surchargé dynamiquement à l'exécution via `.env`)
ARG SERVER_PORT=7001
ENV SERVER_PORT=$SERVER_PORT

# 📣 Ce port est exposé pour référence (non obligatoire mais utile pour la doc)
EXPOSE $SERVER_PORT

# 🏁 Démarrer le serveur
CMD ["node", "server.js"]

