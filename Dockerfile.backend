# Dockerfile.backend
# Utiliser une image Node.js 20 Alpine
# Étape 1 : Utiliser une image Node.js 20 Alpine
FROM node:20-alpine AS builder

# Étape 2 : Installer les dépendances système
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    libpq \
    bash \
    file

# Étape 3 : Forcer la mise à jour de npm à la dernière version
RUN npm install -g npm@latest --force

# Vérifier la version de npm après mise à jour
RUN echo "npm version : $(npm --version)"

# Étape 4 : Définir le répertoire de travail
WORKDIR /app

# Étape 5 : Copier les fichiers package.json et package-lock.json
COPY package*.json ./

# Forcer la mise à jour de Prisma et @prisma/client
RUN npm install --save-dev prisma@latest @prisma/client@latest --force

# Vérifier les versions de Prisma
RUN npx prisma --version && npm list @prisma/client

# Étape 6 : Installer les dépendances
RUN npm install --production --loglevel=warn

# Étape 7 : Copier tout le code source
COPY . .

# Étape 8 : Copier le schéma Prisma et générer le client Prisma
RUN npx prisma generate

# Étape 9 : Nettoyer le cache npm
RUN npm cache clean --force

# Étape 10 : Vérifier l'existence de server.js pour le débogage
RUN ls -l /app/server.js && file /app/server.js

# Étape finale : Créer une image allégée pour l'exécution
FROM node:20-alpine

# Définir le répertoire de travail et copier depuis l'étape builder
WORKDIR /app
COPY --from=builder /app /app

# Exposer le port utilisé par le backend
EXPOSE 7000

# Lancer le backend
CMD ["node", "server.js"]
