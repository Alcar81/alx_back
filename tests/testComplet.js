// üìÅ backend/tests/testComplet.js

const { execSync } = require("child_process");
const fs = require("fs");
const net = require("net");

const args = process.argv.slice(2);
const debug = args.includes("--debug");

const sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));
const debugMode = process.argv.includes("--debug");

const runTest = async (description, command) => {
  console.log(`\nüîé ${description}`);
  const start = Date.now();

  try {
    execSync(command, { stdio: "inherit" });
    const duration = ((Date.now() - start) / 1000).toFixed(2);
    console.log(`‚úÖ ${description} - Succ√®s (${duration}s)`);
  } catch (error) {
    console.warn(`‚ö†Ô∏è ${description} - √âchec ou r√©ponse inattendue`);
    process.exit(1);
  }

  await sleep(300);
};

const checkPort = (port, host = "127.0.0.1") => {
  return new Promise((resolve) => {
    const socket = new net.Socket();
    const timeout = 2000;

    socket.setTimeout(timeout);
    socket
      .once("connect", () => {
        socket.destroy();
        resolve(true);
      })
      .once("timeout", () => {
        socket.destroy();
        resolve(false);
      })
      .once("error", () => {
        resolve(false);
      })
      .connect(port, host);
  });
};

const printBanner = () => {
  console.clear();
  console.log(`
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë üéâ Tous les tests ont pass√© avec succ√®s !            üéâ ‚ïë
‚ïë                                                        ‚ïë
‚ïë üöÄ Backend pr√™t √† recevoir des requ√™tes               ‚ïë
‚ïë üîê Authentification fonctionnelle                     ‚ïë
‚ïë ü©∫ Sant√© du serveur confirm√©e                         ‚ïë
‚ïë üß™ Prisma op√©rationnel                                ‚ïë
‚ïë üîê Test de route prot√©g√©e : OK                        ‚ïë
‚ïë üìÇ Routes admin publiques accessibles : OK (si test√©) ‚ïë
‚ïë ‚ùì Gestion des erreurs 404 : OK                        ‚ïë
‚ïë üßº Comportement sans payload JSON valid√©              ‚ïë
‚ïë                                                        ‚ïë
‚ïë üéØ CI/CD termin√© sans erreur !                        ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
  `);
};

(async () => {
  try {
    console.log("üöÄ Lancement de testComplet.js...\n");

    if (debugMode) {
      console.log("üõ†Ô∏è Mode DEBUG actif");
      console.log("üåê SERVER_PORT = ", process.env.SERVER_PORT);
      console.log("üì° API = ", process.env.REACT_APP_API_URL);
    }

    const port = process.env.SERVER_PORT || 7001;
    const portOpen = await checkPort(port);
    if (!portOpen) {
      console.error(`‚ùå Le port ${port} n‚Äôest pas accessible !`);
      process.exit(1);
    } else if (debugMode) {
      console.log(`‚úÖ Le port ${port} est ouvert`);
    }

    const files = [
      "testPrisma.js",
      "testHealth.js",
      "testRegister.js",
      "testLogin.js",
      "testRegisterEmpty.js",
      "testProtectedRoute.js",
      "test404.js",
    ];

    const adminToken = process.env.ADMIN_TEST_TOKEN;
    const includeAdminTest = !!adminToken;
    if (includeAdminTest) {
      files.push("testAdmin.js");
    } else {
      console.log("‚ö†Ô∏è ADMIN_TEST_TOKEN absent ‚ûú testAdmin.js ignor√©.");
    }

    console.log("üîç V√©rification des fichiers de test...");
    files.forEach((file) => {
      const path = `/app/tests/${file}`;
      if (!fs.existsSync(path)) {
        console.error(`‚ùå Le fichier ${file} est manquant dans /app/tests.`);
        process.exit(1);
      }
      console.log(`‚úÖ ${file} trouv√©`);
    });

    for (let i = 0; i < files.length; i++) {
      await runTest(
        `Test ${i + 1}/${files.length} - ${files[i]}`,
        `node /app/tests/${files[i]}`
      );
    }

    printBanner();
  } catch (e) {
    console.error("‚ùå Une erreur inattendue est survenue :", e);
    process.exit(1);
  }
})();
