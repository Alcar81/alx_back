// üìÅ backend/tests/testAdmin.js

const fetch = require("node-fetch");
const PORT = process.env.SERVER_PORT;

// üõ°Ô∏è V√©rifie que le port est bien d√©fini
if (!PORT) {
  console.error("‚ùå SERVER_PORT non d√©fini dans process.env");
  process.exit(1);
}

const BASE_URL = "http://localhost:${PORT}";

// üî• Nouveau ‚ûî lire ADMIN_TEST_TOKEN de l'environnement
const ADMIN_TEST_TOKEN = process.env.ADMIN_TEST_TOKEN;

async function testAdminRoute() {
  try {
    console.log("üß™ Test d'acc√®s √† /api/admin/public...");

    if (!ADMIN_TEST_TOKEN) {
      console.error("‚ùå ADMIN_TEST_TOKEN manquant dans .env !");
      process.exit(1);
    }

    const response = await fetch(`${BASE_URL}/api/admin/public`, {
      headers: {
        Authorization: `Bearer ${ADMIN_TEST_TOKEN}`,
      },
    });

    if (response.ok) {
      console.log("‚úÖ Acc√®s Admin OK.");
      process.exit(0);
    } else if (response.status === 403) {
      console.error("‚ùå Acc√®s interdit (403) - V√©rification du r√¥le ADMIN...");
      const body = await response.json();
      if (body && body.message) {
        console.error("Message serveur :", body.message);
      }
      process.exit(1);
    } else {
      console.error(`‚ùå √âchec acc√®s Admin - code ${response.status}`);
      const body = await response.text();
      console.error("Contenu :", body);
      process.exit(1);
    }
  } catch (error) {
    console.error("‚ùå Erreur inattendue lors du test Admin :", error.message);
    process.exit(1);
  }
}

testAdminRoute();
