name: Déployer Backend

on:
  push:
    branches:
      - dev
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/master' && 'prod' || 'dev' }}

    env:
      ENV: ${{ vars.ENV }}
      LOG_FILE: backend/logs/backend_deploy_${{ vars.ENV }}.log
      DB_PORT_INT: ${{ vars.DB_PORT_INT }}
      DB_PORT_EXT: ${{ vars.DB_PORT_EXT }}
      BACKEND_PORT: ${{ vars.BACKEND_PORT }}
      DB_NAME: ${{ vars.DB_POST }}_${{ vars.ENV }}
      DB_HOST: ${{ vars.DB_POST }}_${{ vars.ENV }}
      NETWORK: ${{ vars.NET }}_${{ vars.ENV }}
      SERVER_IP: ${{ secrets.SERVER_IP }}
      SSH_PORT: ${{ secrets.SSH_PORT }}
      SSH_USER: ${{ secrets.SSH_USER }}
      DB_USERNAME: ${{ vars.USR_DB }}_${{ vars.ENV }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      POSTGRES_CONTAINER_NAME: ${{ vars.DB_POST }}_${{ vars.ENV }}
      POSTGRES_VOLUME: ${{ vars.DB_POST }}_${{ vars.DATA }}_${{ vars.ENV }}
      CONTAINER_NAME: ${{ vars.BACK }}_${{ vars.NODE }}_${{ vars.ENV }}
      MOUNT_PATH: ${{ secrets.MOUNT_PATH }}
      DATABASE_URL: "postgresql://$DB_USERNAME:$DB_PASSWORD@$DB_HOST:$DB_PORT_INT/$DB_NAME"
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      DOCKER_NAME: back_node:latest
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

    steps:
      # Étape 1 - Préparation des logs
      - name: Préparer les logs
        run: |
          mkdir -p backend/logs || (echo "Erreur : Impossible de créer le répertoire des logs." && exit 1)
          chmod -R 777 backend/logs
          echo "=== Déploiement Backend : $(date) ===" > $LOG_FILE   

      # Étape 1.1 - Afficher les variables générées et valider leur présence
      - name: 1.1 - Afficher les variables générées
        run: |
          echo "[INFO] Affichage des variables générées : " | tee -a $LOG_FILE
          MANDATORY_VARS=(ENV DB_NAME DB_USERNAME DB_PASSWORD DB_HOST DATABASE_URL MOUNT_PATH CONTAINER_NAME DB_PORT_INT DB_PORT_EXT BACKEND_PORT NETWORK JWT_SECRET)
          for VAR in "${MANDATORY_VARS[@]}"; do
            if [ -z "${!VAR}" ]; then
              echo "[ERROR] La variable $VAR est manquante ou vide." | tee -a $LOG_FILE
              exit 1
            fi
            echo "[INFO] $VAR=${!VAR}" | tee -a $LOG_FILE
          done

      # Étape 2 - Récupérer le dépôt Git
      - name: 2 - Récupérer le dépôt
        uses: actions/checkout@v3

      # Étape 2.5 - Configurer la version de Node.js
      - name: Configurer Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      # Étape 3 - Installer les dépendances et corriger les vulnérabilités
      - name: 3 - Installer les dépendances et corriger les vulnérabilités
        run: |
          mkdir -p backend/logs || (echo "Erreur : Impossible de créer le répertoire des logs." && exit 1)
          npm install --production | tee -a backend/logs/backend_deploy.log || exit 1
          npm audit fix | tee -a backend/logs/backend_deploy.log || exit 1

      # Étape 4 - Construire l'image Docker pour le backend
      - name: 4 - Construire l'image Docker
        run: |
          docker image prune -f || (echo "Erreur : Impossible de nettoyer les images Docker." && exit 1)
          docker build -t $DOCKER_NAME -f Dockerfile.backend . | tee -a backend/logs/backend_deploy.log
      
      # Étape 5 - Démarrer l'agent SSH et ajouter la clé
      - name: 5 - Démarrer l'agent SSH et ajouter la clé
        run: |
          echo "$SSH_PRIVATE_KEY" > /tmp/git_id_rsa
          chmod 600 /tmp/git_id_rsa
          eval $(ssh-agent -s)
          ssh-add /tmp/git_id_rsa || (echo "Erreur : Clé SSH invalide." && exit 1)
        

      # Étape 6 - Démarrer le conteneur PostgreSQL
      - name: 6 - Démarrer le conteneur PostgreSQL
        run: |
          ssh -p $SSH_PORT -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i /tmp/git_id_rsa $SSH_USER@$SERVER_IP "
            set -e
            echo '===================================' | tee -a $LOG_FILE
            echo '[INFO - Étape 6] Configuration du conteneur PostgreSQL...' | tee -a $LOG_FILE

            # 6.1 - Sauvegarde conditionnelle de la base de données (production uniquement)
            if [ \"$ENV\" = \"prod\" ]; then
              echo '[INFO - Étape 6.1] Sauvegarde de la base de données en production...' | tee -a $LOG_FILE
              BACKUP_FILE=\"/root/prod_backup_\$(date +%Y%m%d%H%M%S).sql\"
              docker exec $POSTGRES_CONTAINER_NAME pg_dump -U $DB_USERNAME $DB_NAME > \$BACKUP_FILE || {
                echo '[ERROR] Échec de la sauvegarde de la base de données.' | tee -a $LOG_FILE
                exit 1
              }
              echo '[INFO] Sauvegarde effectuée : \$BACKUP_FILE' | tee -a $LOG_FILE

              # Nettoyage des anciens backups (plus de 7 jours)
              echo '[INFO - Étape 6.1] Nettoyage des anciens backups...' | tee -a $LOG_FILE
              find /root -name 'prod_backup_*.sql' -type f -mtime +7 -exec rm -f {} \; || {
                echo '[WARNING] Échec du nettoyage des anciens backups.' | tee -a $LOG_FILE
              }
            else
              echo '[INFO] Pas de sauvegarde nécessaire pour cet environnement.' | tee -a $LOG_FILE
            fi

            # 6.2 - Vérification et création du réseau Docker
            if ! docker network ls --filter \"name=^$NETWORK\$\" --format '{{.Name}}' | grep -w $NETWORK; then
              echo '[INFO - Étape 6.2] Création du réseau Docker : $NETWORK' | tee -a $LOG_FILE
              docker network create $NETWORK
            else
              echo '[INFO] Réseau Docker déjà existant : $NETWORK' | tee -a $LOG_FILE
            fi

            # 6.3 - Vérification et création du volume Docker
            if ! docker volume ls --filter \"name=^$POSTGRES_VOLUME\$\" --format '{{.Name}}' | grep -w $POSTGRES_VOLUME; then
              echo '[INFO - Étape 6.3] Création du volume Docker : $POSTGRES_VOLUME' | tee -a $LOG_FILE
              docker volume create $POSTGRES_VOLUME
            else
              echo '[INFO] Volume Docker déjà existant : $POSTGRES_VOLUME' | tee -a $LOG_FILE
            fi

            # 6.4 - Arrêt et suppression de l’ancien conteneur PostgreSQL
            if docker ps -a --filter \"name=$POSTGRES_CONTAINER_NAME\" --format '{{.Names}}' | grep -w $POSTGRES_CONTAINER_NAME; then
              echo '[INFO - Étape 6.4] Suppression de l’ancien conteneur PostgreSQL : $POSTGRES_CONTAINER_NAME' | tee -a $LOG_FILE
              docker stop $POSTGRES_CONTAINER_NAME
              docker rm $POSTGRES_CONTAINER_NAME
            else
              echo '[INFO] Aucun conteneur PostgreSQL existant à supprimer.' | tee -a $LOG_FILE
            fi

            # 6.5 - Téléchargement de l’image PostgreSQL
            echo '[INFO - Étape 6.5] Téléchargement de l’image PostgreSQL...' | tee -a $LOG_FILE
            docker pull postgres:13

            # 6.6 - Démarrage du nouveau conteneur PostgreSQL
            docker run -d --name $POSTGRES_CONTAINER_NAME \
              --network $NETWORK \
              -e POSTGRES_USER=$DB_USERNAME \
              -e POSTGRES_PASSWORD=$DB_PASSWORD \
              -e POSTGRES_DB=$DB_NAME \
              -v $POSTGRES_VOLUME:/var/lib/postgresql/data \
              -p $DB_PORT_EXT:$DB_PORT_INT \
              postgres:13

            # 6.7 - Pause pour garantir le démarrage
            echo '[INFO - Étape 6.7] Attente de 10 secondes pour PostgreSQL...' | tee -a $LOG_FILE
            sleep 10

            # 6.8 - Vérification finale de PostgreSQL
            if docker exec $POSTGRES_CONTAINER_NAME pg_isready -U $DB_USERNAME; then
              echo '[SUCCESS - Étape 6] PostgreSQL est opérationnel.' | tee -a $LOG_FILE
            else
              echo '[ERROR - Étape 6] PostgreSQL n’est pas prêt après le délai d’attente.' | tee -a $LOG_FILE
              exit 1
            fi
          " | tee -a $LOG_FILE


      # Étape 7 - Configuration de la base de données
      - name: 7 - Configurer la base de données PostgreSQL
        run: |
          ssh -p $SSH_PORT -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i /tmp/git_id_rsa $SSH_USER@$SERVER_IP "
            set -e
            echo '===================================' | tee -a $LOG_FILE
            echo '[INFO - Étape 7] Configuration de la base de données PostgreSQL...' | tee -a $LOG_FILE

            # 7.1 - Vérification du rôle "postgres"
            echo '[INFO - Étape 7.1] Vérification du rôle postgres...' | tee -a $LOG_FILE
            if ! docker exec -i $POSTGRES_CONTAINER_NAME psql -U postgres -c \"\du\" | grep -q \"postgres\"; then
              echo '[ERROR] Le rôle postgres n’existe pas. Création en cours...' | tee -a $LOG_FILE
              docker exec -i $POSTGRES_CONTAINER_NAME psql -U postgres -c \"CREATE ROLE postgres;\" || {
                echo '[ERROR] Impossible de créer le rôle postgres.' | tee -a $LOG_FILE
                exit 1
              }
              echo '[INFO] Le rôle postgres a été créé avec succès.' | tee -a $LOG_FILE
            else
              echo '[INFO] Le rôle postgres existe.' | tee -a $LOG_FILE
            fi

            # 7.2 - Suppression de la base de données existante
            echo '[INFO - Étape 7.2] Suppression de la base de données existante...' | tee -a $LOG_FILE
            docker exec -i $POSTGRES_CONTAINER_NAME psql -U postgres -c \"DROP DATABASE IF EXISTS $DB_NAME;\" || {
              echo '[ERROR] Impossible de supprimer la base de données.' | tee -a $LOG_FILE
              exit 1
            }

            # 7.3 - Création de la base de données et du rôle
            echo '[INFO - Étape 7.3] Création de la base de données et du rôle...' | tee -a $LOG_FILE
            docker exec -i $POSTGRES_CONTAINER_NAME psql -U postgres -c \"CREATE ROLE $DB_USERNAME WITH LOGIN PASSWORD '$DB_PASSWORD';\" || {
              echo '[ERROR] Impossible de créer le rôle utilisateur.' | tee -a $LOG_FILE
              exit 1
            }
            docker exec -i $POSTGRES_CONTAINER_NAME psql -U postgres -c \"CREATE DATABASE $DB_NAME WITH OWNER $DB_USERNAME;\" || {
              echo '[ERROR] Impossible de créer la base de données.' | tee -a $LOG_FILE
              exit 1
            }

            # 7.4 - Attribution des privilèges
            echo '[INFO - Étape 7.4] Attribution des privilèges sur la base de données...' | tee -a $LOG_FILE
            docker exec -i $POSTGRES_CONTAINER_NAME psql -U postgres -c \"GRANT ALL PRIVILEGES ON DATABASE $DB_NAME TO $DB_USERNAME;\" || {
              echo '[ERROR] Impossible d’attribuer les privilèges.' | tee -a $LOG_FILE
              exit 1
            }
            echo '[SUCCESS - Étape 7] Configuration de la base de données terminée.' | tee -a $LOG_FILE
          " | tee -a $LOG_FILE
        
    
      - name: 8 - Déployer le conteneur Backend
        run: |
          ssh -p $SSH_PORT -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i /tmp/git_id_rsa $SSH_USER@$SERVER_IP "
          set -e
          echo '===================================' | tee -a $LOG_FILE
          echo '[INFO - Étape 8.1] Début du déploiement du backend...' | tee -a $LOG_FILE

          # 8.2 - Vérification des variables d'environnement
          echo '[INFO - Étape 8.2] Vérification des variables d'environnement...' | tee -a $LOG_FILE
          DATABASE_URL=\"postgresql://$DB_USERNAME:$DB_PASSWORD@$DB_HOST:$DB_PORT_INT/$DB_NAME\"
          MANDATORY_VARS=(ENV DB_NAME DB_USERNAME DB_PASSWORD DB_HOST DATABASE_URL MOUNT_PATH CONTAINER_NAME DB_PORT_INT DB_PORT_EXT BACKEND_PORT NETWORK JWT_SECRET)
          for VAR in \"${MANDATORY_VARS[@]}\"; do
            if [ -z \"\${!VAR}\" ]; then
              echo \"[ERROR] La variable $VAR est manquante ou vide.\" | tee -a $LOG_FILE
              exit 1
            fi
            echo \"[INFO] $VAR=\${!VAR}\" | tee -a $LOG_FILE
          done

          # Étape 8.3 - Création dynamique du fichier .env
          echo '[INFO - Étape 8.3] Création dynamique du fichier .env...' | tee -a $LOG_FILE
          cat <<EOF > $MOUNT_PATH/.env
          DATABASE_URL=$DATABASE_URL
          NODE_ENV=$ENV
          JWT_SECRET=$JWT_SECRET
          SERVER_PORT=$BACKEND_PORT
          EOF

          if [ -f \"$MOUNT_PATH/.env\" ]; then
            echo '[INFO] Fichier .env créé avec succès.' | tee -a $LOG_FILE
          else
            echo '[ERROR] Échec de la création du fichier .env.' | tee -a $LOG_FILE
            exit 1
          fi

          # Étape 8.4 - Suppression de l'ancien conteneur si nécessaire
          echo '[INFO - Étape 8.4] Vérification et suppression de l’ancien conteneur...' | tee -a $LOG_FILE
          if docker ps -a --filter \"name=$CONTAINER_NAME\" --format '{{.Names}}' | grep -w $CONTAINER_NAME; then
            echo '[INFO] Suppression de l’ancien conteneur : $CONTAINER_NAME' | tee -a $LOG_FILE
            docker stop $CONTAINER_NAME
            docker rm $CONTAINER_NAME
          fi

          # Étape 8.5 - Lancer un nouveau conteneur backend
          echo '[INFO - Étape 8.5] Lancement du conteneur backend...' | tee -a $LOG_FILE
          docker run -d --name $CONTAINER_NAME \
            --network $NETWORK \
            -v $MOUNT_PATH:/app \
            -w /app \
            -p $BACKEND_PORT:$BACKEND_PORT \
            $DOCKER_NAME || { echo '[ERROR] Échec du démarrage du conteneur.' | tee -a $LOG_FILE; exit 1; }

          echo '[SUCCESS - Étape 8] Déploiement terminé avec succès.' | tee -a $LOG_FILE
          " | tee -a $LOG_FILE

      # Étape 9 - Configurer l'URL Git distante
      - name: 9 - Configurer l'URL Git distante
        run: git remote set-url origin ${{ secrets.GIT_REPO_URL }}

      # Étape 10 - Nettoyage des fichiers temporaires
      - name: Nettoyer les fichiers temporaires
        run: rm -f /tmp/git_id_rsa