name: Deploy Backend

on:
  push:
    branches:
      - master
      - dev

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/master' && 'prod' || 'dev' }}

    env: # Variables communes à toutes les étapes
      DB_PORT_INT: 5432
      DB_PORT_EXT: "${{ github.ref == 'refs/heads/master' && 5434 || 5433 }}"
      DB_NAME: "${{ github.ref == 'refs/heads/master' && 'postgres_prod' || 'postgres_dev' }}"
      DB_HOST: "${{ github.ref == 'refs/heads/master' && 'postgres_prod' || 'postgres_dev' }}"
      NETWORK: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' && 'prod_network' || 'dev_network' }}
      SERVER_IP: ${{ secrets.SERVER_IP }}
      SSH_PORT: ${{ secrets.SSH_PORT }}
      SSH_USER: ${{ secrets.SSH_USER }}
      POSTGRES_CONTAINER_NAME: "${{ github.ref == 'refs/heads/master' && 'postgres_prod' || 'postgres_dev' }}"
      POSTGRES_VOLUME: "${{ github.ref == 'refs/heads/master' && 'postgres_data_prod' || 'postgres_data_dev' }}"
      CONTAINER_NAME: "${{ github.ref == 'refs/heads/master' && 'back_node_prod' || 'back_node_dev' }}"
      MOUNT_PATH: "${{ github.ref == 'refs/heads/master' && '/home/prod.alxmultimedia.com/backend' || '/home/dev.alxmultimedia.com/backend' }}"
      DATABASE_URL: "postgresql://${{ secrets.DB_USERNAME }}:${{ secrets.DB_PASSWORD }}@${{ github.ref == 'refs/heads/master' && 'postgres_prod' || 'postgres_dev' }}:${DB_PORT_INT}/${DB_NAME}"
      BACKEND_PORT: "${{ secrets.PORT }}"

    steps:
      # Étape 1 - Checkout du dépôt Git  
      - name: 1 - Checkout repository
        uses: actions/checkout@v3

      # Étape 2 - Build Docker image for backend
      - name: 2 - Build Docker image
        env:
          DOCKER_NAME: "back_node:latest"
        run: docker build -t $DOCKER_NAME -f Dockerfile.backend .

      # Étape 3 : Push Docker image to registry (optionnel)
      - name: 3 - Push Docker image to registry
        env:
          DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          if [ -n "$DOCKER_REGISTRY" ]; then
            echo "$DOCKER_PASSWORD" | docker login $DOCKER_REGISTRY -u "$DOCKER_USERNAME" --password-stdin
            docker tag back_node:latest $DOCKER_REGISTRY/$DOCKER_USERNAME/back_node:latest
            docker push $DOCKER_REGISTRY/$DOCKER_USERNAME/back_node:latest
          else
            echo "DOCKER_REGISTRY is not defined. Skipping Docker push."
          fi

      # Étape 4 - Start SSH agent and add key
      - name: 4 - Start SSH agent and add key
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          echo "$SSH_PRIVATE_KEY" > /tmp/git_id_rsa
          chmod 600 /tmp/git_id_rsa
          eval $(ssh-agent -s)
          ssh-add /tmp/git_id_rsa

      # Étape 5 - Deploy PostgreSQL container
      - name: 5 - Deploy PostgreSQL container
        run: |
          ssh -p $SSH_PORT -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i /tmp/git_id_rsa $SSH_USER@$SERVER_IP "
            docker volume create $POSTGRES_VOLUME || true &&
            docker pull postgres:13 &&
            docker stop $POSTGRES_CONTAINER_NAME || true &&
            docker rm $POSTGRES_CONTAINER_NAME || true &&
            docker run -d --name $POSTGRES_CONTAINER_NAME \
              --network $NETWORK \
              -e POSTGRES_USER=${{ secrets.DB_USERNAME }} \
              -e POSTGRES_PASSWORD=${{ secrets.DB_PASSWORD }} \
              -e POSTGRES_DB=$DB_NAME \
              -v $POSTGRES_VOLUME:/var/lib/postgresql/data \
              -p $DB_PORT_EXT:$DB_PORT_INT \
              postgres:13 &&
            sleep 10 && # Attendre que PostgreSQL soit prêt
            docker exec -i $POSTGRES_CONTAINER_NAME psql -U ${{ secrets.DB_USERNAME }} -d $DB_NAME <<EOF
            DO \$\$
            BEGIN
                IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = 'usr_db_dev') THEN
                    CREATE USER usr_db_dev WITH PASSWORD 'dw33kMyiQvNL62p3aCjd';
                END IF;
            END
            \$\$;
            GRANT ALL PRIVILEGES ON DATABASE $DB_NAME TO usr_db_dev;
            EOF
          "

      # Étape 6 - Deploy Backend container
      - name: 6 - Deploy Backend container
        run: |
          ssh -p $SSH_PORT -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i /tmp/git_id_rsa $SSH_USER@$SERVER_IP "
            docker stop $CONTAINER_NAME || true &&
            docker rm $CONTAINER_NAME || true &&
            docker run -d --name $CONTAINER_NAME \
              --network $NETWORK \
              -e DATABASE_URL=\"$DATABASE_URL\" \
              -e NODE_ENV=\"${{ github.ref == 'refs/heads/master' && 'prod' || 'dev' }}\" \
              -e JWT_SECRET=${{ secrets.JWT_SECRET }} \
              -v $MOUNT_PATH:/app \
              -w /app \
              -p $BACKEND_PORT:7000 \
              back_node:latest
          "

      # Étape 7 - Set Remote Git URL (si nécessaire)
      - name: 7 - Set Remote Git URL
        run: git remote set-url origin ${{ secrets.GIT_REPO_URL }}

      # Étape 8 - Health Check
      - name: 8 - Health Check
        run: |
          ssh -p $SSH_PORT -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i /tmp/git_id_rsa $SSH_USER@$SERVER_IP "
            curl http://localhost:$BACKEND_PORT/api/health || exit 1
          "
