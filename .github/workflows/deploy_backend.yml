name: Déployer Backend 

on:
  push:
    branches:      
      - dev
      - master
      # Ajoutez ici de nouvelles branches pour de nouveaux environnements (par exemple staging, uat)

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/master' && 'prod' || 'dev' }}
    # NOTE : L'environnement est automatiquement défini en fonction de la branche.
    # - 'master' correspond à 'prod'
    # - Toute autre branche correspond à 'dev' (ou ajustez si nécessaire).
    # - Pour ajouter un nouvel environnement :
    #   1. Ajoutez une branche correspondante ci-dessus (par exemple staging).
    #   2. Mettez à jour les secrets GitHub correspondants pour ce nouvel environnement (par ex. ENV, DB_POST, etc.).

    env:
      ENV: ${{ vars.ENV }}
      DB_PORT_INT: ${{ secrets.DB_PORT_INT }}
      DB_PORT_EXT: ${{ secrets.DB_PORT_EXT }}
      DB_NAME: ${{ vars.DB_POST }}_${{ vars.ENV }}
      DB_HOST: ${{ vars.DB_POST }}_${{ vars.ENV }}
      NETWORK: ${{ vars.NET }}_${{ vars.ENV }}
      SERVER_IP: ${{ secrets.SERVER_IP }}
      SSH_PORT: ${{ secrets.SSH_PORT }}
      SSH_USER: ${{ secrets.SSH_USER }}
      DB_USERNAME: ${{ vars.USR_DB }}_${{ vars.ENV }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      POSTGRES_CONTAINER_NAME: ${{ vars.DB_POST }}_${{ vars.ENV }}
      POSTGRES_VOLUME: ${{ vars.DB_POST }}_${{ vars.DATA }}_${{ vars.ENV }}
      CONTAINER_NAME: ${{ vars.BACK }}_${{ vars.NODE }}_${{ vars.ENV }}
      MOUNT_PATH: ${{ secrets.MOUNT_PATH }}
      DATABASE_URL: "postgresql://${{ vars.USR_DB }}_${{ vars.ENV }}:${{ secrets.DB_PASSWORD }}@${{ vars.DB_POST }}_${{ vars.ENV }}:${{ secrets.DB_PORT_INT }}/${{ vars.DB_POST }}_${{ vars.ENV }}"
      BACKEND_PORT: ${{ secrets.PORT }}

    steps:
      # Étape 1 - Afficher les variables générées
      - name: 1 - Afficher les variables générées
        run: |
          echo "Environnement : $ENV"
          echo "Nom de la base de données : $DB_NAME"
          echo "Hôte de la base de données : $DB_HOST"
          echo "Nom du conteneur PostgreSQL : $POSTGRES_CONTAINER_NAME"
          echo "URL de connexion à la base : $DATABASE_URL"

      # Étape 2 - Récupérer le dépôt Git
      - name: 2 - Récupérer le dépôt
        uses: actions/checkout@v3

      # Étape 2.5 - Configurer la version de Node.js
      - name: Configurer Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      # Étape 3 - Install dependencies
      - name: 3 - Install dependencies
        run: npm install

      # Étape 4 - Construire l'image Docker pour le backend
      - name: 4 - Construire l'image Docker
        env:
          DOCKER_NAME: "back_node:latest"
        run: docker build -t $DOCKER_NAME -f Dockerfile.backend .      

      # Étape 5 - Démarrer l'agent SSH et ajouter la clé
      - name: 5 - Démarrer l'agent SSH et ajouter la clé
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          echo "$SSH_PRIVATE_KEY" > /tmp/git_id_rsa
          chmod 600 /tmp/git_id_rsa
          eval $(ssh-agent -s)
          ssh-add /tmp/git_id_rsa

      # Étape 6 - Démarrer le conteneur PostgreSQL
      - name: 6 - Démarrer le conteneur PostgreSQL
        run: |
          ssh -p $SSH_PORT -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i /tmp/git_id_rsa $SSH_USER@$SERVER_IP "
            docker network create $NETWORK || true &&
            docker volume create $POSTGRES_VOLUME || true &&
            docker ps -a --filter \"name=$POSTGRES_CONTAINER_NAME\" --format '{{.Names}}' | grep -w $POSTGRES_CONTAINER_NAME && docker stop $POSTGRES_CONTAINER_NAME || true &&
            docker ps -a --filter \"name=$POSTGRES_CONTAINER_NAME\" --format '{{.Names}}' | grep -w $POSTGRES_CONTAINER_NAME && docker rm $POSTGRES_CONTAINER_NAME || true &&
            docker pull postgres:13 &&
            docker run -d --name $POSTGRES_CONTAINER_NAME \
              --network $NETWORK \
              -e POSTGRES_USER=$DB_USERNAME \
              -e POSTGRES_PASSWORD=$DB_PASSWORD \
              -e POSTGRES_DB=$DB_NAME \
              -v $POSTGRES_VOLUME:/var/lib/postgresql/data \
              -p $DB_PORT_EXT:$DB_PORT_INT \
              postgres:13
          "

      # Étape 6.1 - Nettoyer les anciens backups
      - name: Cleanup old backups (Prod Only)
        if: ${{ env.ENV == 'prod' }}
        run: |
          ssh -p $SSH_PORT -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i /tmp/git_id_rsa $SSH_USER@$SERVER_IP "
            find /root -name 'prod_backup_*.sql' -type f -mtime +7 -exec rm -f {} \;
          "

      # Étape 6.2 - Sauvegarder la base de données
      - name: Backup PostgreSQL Database (Prod Only)
        if: ${{ env.ENV == 'prod' }}
        run: |
          ssh -p $SSH_PORT -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i /tmp/git_id_rsa $SSH_USER@$SERVER_IP "
            docker exec $POSTGRES_CONTAINER_NAME pg_dump -U $DB_USERNAME $DB_NAME > /root/prod_backup_$(date +%Y%m%d%H%M%S).sql
          "

      # Étape 7 - Créer la base de données et l'utilisateur démo
      - name: 7 - Créer la base de données et l'utilisateur démo
        run: |
          ssh -p $SSH_PORT -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i /tmp/git_id_rsa $SSH_USER@$SERVER_IP "
            echo \"CREATE ROLE $DB_USERNAME WITH LOGIN PASSWORD '$DB_PASSWORD';\" > init_database.sql &&
            echo \"CREATE DATABASE $DB_NAME WITH OWNER $DB_USERNAME;\" >> init_database.sql &&
            echo \"GRANT ALL PRIVILEGES ON DATABASE $DB_NAME TO $DB_USERNAME;\" >> init_database.sql &&
            docker cp init_database.sql $POSTGRES_CONTAINER_NAME:/tmp/init_database.sql &&
            docker exec -i $POSTGRES_CONTAINER_NAME psql -U postgres -f /tmp/init_database.sql &&
            rm init_database.sql &&
            docker exec $POSTGRES_CONTAINER_NAME rm /tmp/init_database.sql
          "

      # Étape 8 - Déployer le conteneur Backend
      - name: 8 - Déployer le conteneur Backend
        run: |
          ssh -p $SSH_PORT -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i /tmp/git_id_rsa $SSH_USER@$SERVER_IP "
            docker ps -a --filter \"name=$CONTAINER_NAME\" --format '{{.Names}}' | grep -w $CONTAINER_NAME && docker stop $CONTAINER_NAME || true &&
            docker ps -a --filter \"name=$CONTAINER_NAME\" --format '{{.Names}}' | grep -w $CONTAINER_NAME && docker rm $CONTAINER_NAME || true &&
            docker run -d --name $CONTAINER_NAME \
              --network $NETWORK \
              -e DATABASE_URL=\"$DATABASE_URL\" \
              -e NODE_ENV=${{ vars.ENV }} \
              -e JWT_SECRET=${{ secrets.JWT_SECRET }} \
              -v $MOUNT_PATH:/app \
              -w /app \
              -p $BACKEND_PORT:7000 \
              back_node:latest
          "

      # Étape 9 - Configurer l'URL Git distante
      - name: 9 - Configurer l'URL Git distante
        run: git remote set-url origin ${{ secrets.GIT_REPO_URL }}
