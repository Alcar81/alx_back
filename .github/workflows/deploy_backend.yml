# /home/dev.alxmultimedia.com/backend/.github/workflows/deploy_backend.yml
name: Deploy Backend

on:
  push:
    branches:
      - master
      - dev

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/master' && 'prod' || 'dev' }}

    steps:
      # Étape 1 - Checkout du dépôt Git
      - name: 1 - Checkout repository
        uses: actions/checkout@v3

      # Étape 2 - Build Docker image for backend
      - name: 2 - Build Docker image
        env:
          DOCKER_NAME: "back_node:latest"
        run: docker build -t $DOCKER_NAME -f Dockerfile.backend .

      # Étape 3 : Push Docker image to registry (optionnel)
      - name: 3 - Push Docker image to registry
        env:
          DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          if [ -n "$DOCKER_REGISTRY" ]; then
            echo "$DOCKER_PASSWORD" | docker login $DOCKER_REGISTRY -u "$DOCKER_USERNAME" --password-stdin
            docker tag back_node:latest $DOCKER_REGISTRY/$DOCKER_USERNAME/back_node:latest
            docker push $DOCKER_REGISTRY/$DOCKER_USERNAME/back_node:latest
          else
            echo "DOCKER_REGISTRY is not defined. Skipping Docker push."
          fi

      # Étape 4 - Start SSH agent and add key
      - name: 4 - Start SSH agent and add key
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          echo "$SSH_PRIVATE_KEY" > /tmp/git_id_rsa
          chmod 600 /tmp/git_id_rsa
          eval $(ssh-agent -s)
          ssh-add /tmp/git_id_rsa

      # Étape 5 - Deploy Docker container on server
      - name: 5 - Deploy Docker container on server
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
          SSH_USER: ${{ secrets.SSH_USER }}
          NETWORK: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' && 'prod_network' || 'dev_network' }}
          PORT: ${{ secrets.PORT }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_HOST: "${{ secrets.DB_HOST }}"
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_NAME: "${{ secrets.DB_NAME }}"
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          CONTAINER_NAME: "${{ github.ref == 'refs/heads/master' && 'back_node_prod' || 'back_node_dev' }}"
        run: |
          ssh -p $SSH_PORT -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i /tmp/git_id_rsa $SSH_USER@$SERVER_IP "
            echo \"$DOCKER_PASSWORD\" | docker login $DOCKER_REGISTRY -u \"$DOCKER_USERNAME\" --password-stdin &&
            docker stop $CONTAINER_NAME || true &&
            docker rm $CONTAINER_NAME || true &&
            docker run -d --name $CONTAINER_NAME \
              --network $NETWORK \
              -e NODE_ENV=${{ github.ref == 'refs/heads/master' && 'prod' || 'dev' }} \
              -e DB_USERNAME=$DB_USERNAME \
              -e DB_PASSWORD=$DB_PASSWORD \
              -e DB_HOST=$DB_HOST \
              -e DB_PORT=$DB_PORT \
              -e DB_NAME=$DB_NAME \
              -e JWT_SECRET=$JWT_SECRET \
              -p $PORT:7000 \
              $DOCKER_REGISTRY/$DOCKER_USERNAME/back_node:latest
          "
          rm -f /tmp/git_id_rsa

      # Étape 6 - Set Remote Git URL (si nécessaire)
      - name: 6 - Set Remote Git URL
        env:
          GIT_REPO_URL: ${{ secrets.GIT_REPO_URL }}
        run: git remote set-url origin $GIT_REPO_URL
