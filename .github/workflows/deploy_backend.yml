name: Déployer Backend

on:
  push:
    branches:
      - dev
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/master' && 'prod' || 'dev' }}

    env:
      ENV: ${{ vars.ENV }}
      LOG_FILE: backend/logs/backend_deploy_${{ vars.ENV }}.log
      DB_PORT_INT: ${{ vars.DB_PORT_INT }}
      DB_PORT_EXT: ${{ vars.DB_PORT_EXT }}
      BACKEND_PORT: ${{ vars.BACKEND_PORT }}
      DB_NAME: ${{ vars.DB_POST }}_${{ vars.ENV }}
      DB_HOST: ${{ vars.DB_POST }}_${{ vars.ENV }}
      NETWORK: ${{ vars.NET }}_${{ vars.ENV }}
      SERVER_IP: ${{ secrets.SERVER_IP }}
      SSH_PORT: ${{ secrets.SSH_PORT }}
      SSH_USER: ${{ secrets.SSH_USER }}     
      DB_USERNAME: ${{ vars.USR_DB }}_${{ vars.ENV }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      POSTGRES_CONTAINER_NAME: ${{ vars.DB_POST }}_${{ vars.ENV }}
      POSTGRES_VOLUME: ${{ vars.DB_POST }}_${{ vars.DATA }}_${{ vars.ENV }}
      CONTAINER_NAME: ${{ vars.BACK }}_${{ vars.NODE }}_${{ vars.ENV }}
      MOUNT_PATH: ${{ secrets.MOUNT_PATH }}
      DATABASE_URL: "postgresql://$DB_USERNAME:$DB_PASSWORD@$DB_HOST:$DB_PORT_INT/$DB_NAME"
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      DOCKER_NAME: back_node:latest
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

    steps:
      # Étape 1 : Préparation initiale
      - name: 1 - Préparation initiale
        run: |
          echo "=== Début de la préparation initiale ==="
          echo "Création du répertoire de logs..."
          mkdir -p backend/logs || (echo "Erreur : Impossible de créer le répertoire des logs." && exit 1)
          chmod -R 777 backend/logs
          echo "Répertoire de logs créé avec succès."
          echo "=== Fin de la préparation initiale ==="  

      # Étape 1.1 - Afficher les variables générées et valider leur présence
      - name: 1.1 - Afficher les variables générées
        run: |
          echo "[INFO] Affichage des variables générées : " | tee -a $LOG_FILE
          MANDATORY_VARS=(ENV DB_NAME DB_USERNAME DB_PASSWORD DB_HOST DATABASE_URL MOUNT_PATH CONTAINER_NAME DB_PORT_INT DB_PORT_EXT BACKEND_PORT NETWORK JWT_SECRET)
          for VAR in "${MANDATORY_VARS[@]}"; do
            if [ -z "${!VAR}" ]; then
              echo "[ERROR] La variable $VAR est manquante ou vide." | tee -a $LOG_FILE
              exit 1
            fi
            echo "[INFO] $VAR=${!VAR}" | tee -a $LOG_FILE
          done

      # Étape 2 - Récupérer le dépôt Git
      - name: 2 - Récupérer le dépôt
        uses: actions/checkout@v3
        

      # Étape 2.1 - Vérification après checkout
      - name: 2.1 - Vérification après checkout
        run: |
          echo "[INFO] Vérification après le checkout..."
          ls -la
          if [ ! -f package.json ]; then
            echo "[ERROR] Fichier package.json introuvable à la racine. Vérifiez la structure du dépôt." && exit 1
          fi

      # Étape 2.2 - Configurer la version de Node.js
      - name: 2.2 - Configurer Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.18.1'

      # Étape 3 - Installer les dépendances et valider l'arbre de dépendances
      - name: 3 - Installer les dépendances et valider l'arbre de dépendances
        run: |
          echo "[INFO - 3.1] Création du répertoire des logs..."
          mkdir -p logs || (echo "[ERROR - 3.1] Impossible de créer le répertoire des logs." && exit 1)

          echo "[INFO - 3.2] Installation des dépendances pour l'environnement $ENV..."
          if [ "$ENV" = "prod" ]; then
            npm install --omit=dev --loglevel=warn | tee -a logs/backend_deploy.log || exit 1
          else
            npm install --loglevel=warn | tee -a logs/backend_deploy.log || exit 1
          fi

          echo "[INFO - 3.3] Validation des vulnérabilités..."
          npm audit --loglevel=warn | tee -a logs/backend_deploy.log || {
            echo "[WARNING - 3.3] Audit automatique échoué. À vérifier manuellement."
          }

          echo "[INFO - 3.4] Validation de l'arbre des dépendances..."
          if grep -q 'Invalid package tree' logs/backend_deploy.log; then
            echo "[WARNING - 3.4] Arbre de dépendances invalide détecté. Régénération en cours..."
            rm -rf node_modules package-lock.json
            npm install --loglevel=warn | tee -a logs/backend_deploy.log || exit 1
          else
            echo "[INFO - 3.4] Arbre de dépendances valide."
          fi

          echo "[SUCCESS - 3.5] Dépendances prêtes pour le build Docker."

      # Étape 4 - Construire l'image Docker pour le backend
      - name: 4 - Construire l'image Docker
        run: |
          echo "[INFO - 4.1] Nettoyage des images Docker inutilisées..."
          docker image prune -f || (echo "[ERROR - 4.1] Impossible de nettoyer les images Docker." && exit 1)

          echo "[INFO - 4.2] Construction de l'image Docker pour le backend..."
          docker build -t $DOCKER_NAME -f Dockerfile.backend . | tee -a logs/backend_deploy.log || exit 1

          echo "[INFO - 4.3] Validation du build Docker..."
          docker images $DOCKER_NAME || (echo "[ERROR - 4.3] L'image Docker $DOCKER_NAME n'a pas été construite avec succès." && exit 1)

          echo "[SUCCESS - 4.4] Image Docker construite avec succès : $DOCKER_NAME."
        
      # Étape 5 - Démarrer l'agent SSH et ajouter la clé 
      - name: 5 - Démarrer l'agent SSH et ajouter la clé
        run: |
          echo "$SSH_PRIVATE_KEY" > /tmp/git_id_rsa
          chmod 600 /tmp/git_id_rsa
          eval $(ssh-agent -s)
          ssh-add /tmp/git_id_rsa || (echo "Erreur : Clé SSH invalide." && exit 1)
        
      # Étape 6 - Démarrer le conteneur PostgreSQL
      - name: 6 - Démarrer le conteneur PostgreSQL
        run: |
          echo "=== Étape 6 : Configuration du conteneur PostgreSQL ==="
          # Étape 1 : Préparation initiale
          echo "Préparation initiale..."
          if ! mkdir -p backend/logs; then
            echo "Erreur : Impossible de créer le répertoire des logs."
            exit 1
          fi
          chmod -R 777 backend/logs

          ssh -p $SSH_PORT -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i /tmp/git_id_rsa $SSH_USER@$SERVER_IP "
            set -e
            echo '===================================' | tee -a $LOG_FILE
            echo '[INFO - Étape 6] Configuration du conteneur PostgreSQL...' | tee -a $LOG_FILE

            # 6.1 - Sauvegarde conditionnelle de la base de données (production uniquement)
            if [ \"$ENV\" = \"prod\" ]; then
              echo '[INFO - Étape 6.1] Sauvegarde de la base de données en production...' | tee -a $LOG_FILE
              BACKUP_FILE=\"/root/prod_backup_\$(date +%Y%m%d%H%M%S).sql\"
              if docker ps -a --filter \"name=$POSTGRES_CONTAINER_NAME\" --format '{{.Names}}' | grep -w $POSTGRES_CONTAINER_NAME; then
                if ! docker exec $POSTGRES_CONTAINER_NAME pg_dump -U $DB_USERNAME $DB_NAME > \$BACKUP_FILE; then
                  echo '[ERROR] Échec de la sauvegarde de la base de données.' | tee -a $LOG_FILE
                  exit 1
                fi
                echo '[INFO] Sauvegarde effectuée : \$BACKUP_FILE' | tee -a $LOG_FILE
              else
                echo '[WARNING] Aucun conteneur PostgreSQL actif, pas de sauvegarde possible.' | tee -a $LOG_FILE
              fi

              # 6.2 - Nettoyage des anciens backups
              echo '[INFO - Étape 6.2] Nettoyage des anciens backups (plus de 7 jours)...' | tee -a $LOG_FILE
              if ! find /root -name 'prod_backup_*.sql' -type f -mtime +7 -exec rm -f {} \;; then
                echo '[WARNING] Échec du nettoyage des anciens backups.' | tee -a $LOG_FILE
              fi
            else
              echo '[INFO] Pas de sauvegarde nécessaire pour cet environnement.' | tee -a $LOG_FILE
            fi

            # 6.3 - Vérification et création du réseau Docker
            if ! docker network ls --filter \"name=^$NETWORK\$\" --format '{{.Name}}' | grep -w $NETWORK; then
              echo '[INFO - Étape 6.3] Création du réseau Docker : $NETWORK' | tee -a $LOG_FILE
              docker network create $NETWORK
            else
              echo '[INFO] Réseau Docker déjà existant : $NETWORK' | tee -a $LOG_FILE
            fi

            # 6.4 - Vérification et création du volume Docker
            if ! docker volume ls --filter \"name=^$POSTGRES_VOLUME\$\" --format '{{.Name}}' | grep -w $POSTGRES_VOLUME; then
              echo '[INFO - Étape 6.4] Création du volume Docker : $POSTGRES_VOLUME' | tee -a $LOG_FILE
              docker volume create $POSTGRES_VOLUME
            else
              echo '[INFO] Volume Docker déjà existant : $POSTGRES_VOLUME' | tee -a $LOG_FILE
            fi

            # 6.5 - Arrêt et suppression de l’ancien conteneur PostgreSQL
            if docker ps -a --filter \"name=$POSTGRES_CONTAINER_NAME\" --format '{{.Names}}' | grep -w $POSTGRES_CONTAINER_NAME; then
              echo '[INFO - Étape 6.5] Suppression de l’ancien conteneur PostgreSQL : $POSTGRES_CONTAINER_NAME' | tee -a $LOG_FILE
              docker stop $POSTGRES_CONTAINER_NAME
              docker rm $POSTGRES_CONTAINER_NAME
            else
              echo '[INFO] Aucun conteneur PostgreSQL existant à supprimer.' | tee -a $LOG_FILE
            fi

            # 6.6 - Téléchargement de l’image PostgreSQL
            echo '[INFO - Étape 6.6] Téléchargement de l’image PostgreSQL...' | tee -a $LOG_FILE
            docker pull postgres:13

            # 6.7 - Démarrage du nouveau conteneur PostgreSQL
            echo '[INFO - Étape 6.7] Démarrage du nouveau conteneur PostgreSQL...' | tee -a $LOG_FILE
            if ! docker run -d --name $POSTGRES_CONTAINER_NAME \
              --network $NETWORK \
              -e POSTGRES_USER=$DB_USERNAME \
              -e POSTGRES_PASSWORD=$DB_PASSWORD \
              -e POSTGRES_DB=$DB_NAME \
              -v $POSTGRES_VOLUME:/var/lib/postgresql/data \
              -p $DB_PORT_EXT:$DB_PORT_INT \
              postgres:13; then
              echo '[ERROR] Échec de la création du conteneur PostgreSQL.' | tee -a $LOG_FILE
              exit 1
            fi

            # 6.8 - Pause pour garantir le démarrage
            echo "[INFO - Étape 6.8] Vérification de PostgreSQL jusqu'à ce qu'il soit prêt"
            MAX_ATTEMPTS=30
            for i in \$(seq 1 \$MAX_ATTEMPTS); do
              if docker exec $POSTGRES_CONTAINER_NAME pg_isready -U $DB_USERNAME; then
                echo \"PostgreSQL est prêt après \$i seconde(s).\" | tee -a $LOG_FILE
                break
              fi
              echo \"PostgreSQL n’est pas encore prêt, tentative \$i/\$MAX_ATTEMPTS...\" | tee -a $LOG_FILE
              sleep 1
              if [ \"\$i\" -eq \"\$MAX_ATTEMPTS\" ]; then
                echo \"[ERROR] PostgreSQL n’est pas prêt après \$MAX_ATTEMPTS secondes.\" | tee -a $LOG_FILE
                exit 1
              fi
            done

            echo '[SUCCESS - Étape 6] PostgreSQL est opérationnel.' | tee -a $LOG_FILE
          " | tee -a $LOG_FILE

      # Étape 7 - Créer la base de données et l'utilisateur démo
      - name: 7 - Créer la base de données et les utilisateurs
        run: |
          # 7.1 - Afficher les informations pour le diagnostic
          echo "=== Début de l'étape 7 ==="
          echo "Environnement : $ENV"
          echo "Nom de la base de données : $DB_NAME"
          echo "Hôte de la base de données : $DB_HOST"
          echo "Nom du conteneur PostgreSQL : $POSTGRES_CONTAINER_NAME"
          echo "URL de connexion à la base : $DATABASE_URL"
          echo "Nom utilisateur : $DB_USERNAME"
          echo "Mot de passe de la base : $DB_PASSWORD"

          # 7.2 - Vérification de l'état du conteneur PostgreSQL
          echo "=== 7.2 - Vérification de l'état du conteneur PostgreSQL ==="
          docker ps -a --filter "name=$POSTGRES_CONTAINER_NAME"

          # 7.3 - Attente de 10 secondes pour s'assurer que PostgreSQL est prêt
          echo "=== 7.3 - Attente de 10 secondes pour s'assurer que PostgreSQL est prêt ==="
          sleep 10
          
          # 7.4 - Connexion SSH et exécution des commandes pour gérer la base et les rôles
          echo "=== 7.4 - Connexion SSH et gestion des bases de données et rôles ==="
          ssh -p $SSH_PORT -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i /tmp/git_id_rsa $SSH_USER@$SERVER_IP "

              # 7.4.1 - Vérification de l'état initial de PostgreSQL
              echo \"[INFO - 7.4.1] Vérification de l'état initial de PostgreSQL...\"
              docker exec -i $POSTGRES_CONTAINER_NAME psql -U postgres -c \"\l\" || echo '[WARNING] Impossible d\'énumérer les bases.'
              docker exec -i $POSTGRES_CONTAINER_NAME psql -U postgres -c \"\du\" || echo '[WARNING] Impossible d\'énumérer les rôles.'
      
              # 7.4.2 - Création du rôle postgres si absent
              echo \"[INFO - 7.4.2] Vérification et création du rôle 'postgres' si nécessaire...\"
              docker exec -i $POSTGRES_CONTAINER_NAME psql -U $DB_USERNAME -tc \"SELECT 1 FROM pg_roles WHERE rolname='postgres'\" | grep -q 1 || {
                  echo '[INFO] Création du rôle postgres...'
                  docker exec -i $POSTGRES_CONTAINER_NAME psql -U $DB_USERNAME -c \"CREATE ROLE postgres WITH LOGIN SUPERUSER PASSWORD '$DB_PASSWORD';\"
              }
               
              # 7.4.3 - Gestion des bases et rôles
              echo \"[INFO - 7.4.3] Création ou mise à jour des bases et rôles...\"

          cat <<EOF > init_database.sql
          -- Terminer les connexions actives si la base existe
            SELECT pg_terminate_backend(pg_stat_activity.pid)
            FROM pg_stat_activity
            WHERE pg_stat_activity.datname = '${DB_NAME}'
              AND pg_stat_activity.pid <> pg_backend_pid();

            -- Supprimer la base et le rôle si existants
            DROP DATABASE IF EXISTS \"${DB_NAME}\";
            DROP ROLE IF EXISTS \"${DB_USERNAME}\";

            -- Créer le rôle et la base
            CREATE ROLE \"${DB_USERNAME}\" WITH LOGIN PASSWORD '${DB_PASSWORD}';
            CREATE DATABASE \"${DB_NAME}\" WITH OWNER \"${DB_USERNAME}\";
            GRANT ALL PRIVILEGES ON DATABASE \"${DB_NAME}\" TO \"${DB_USERNAME}\";
          EOF
                        
            # 7.4.4 - Exécution des commandes SQL
            echo \"[INFO - 7.4.4] Exécution des commandes SQL...\"
            docker cp init_database.sql $POSTGRES_CONTAINER_NAME:/tmp/init_database.sql
            docker exec -i $POSTGRES_CONTAINER_NAME psql -U postgres -f /tmp/init_database.sql

            # Pause pour s'assurer que les commandes SQL ont été correctement exécutées
            echo \"[INFO] Pause de 20 secondes pour garantir que les commandes SQL sont appliquées...\"
            sleep 20

            # 7.4.5 - Vérification de l'état final
            echo \"[INFO - 7.4.5] Vérification de l'état final...\"
            docker exec -i $POSTGRES_CONTAINER_NAME psql -U postgres -c \"\l\"
            docker exec -i $POSTGRES_CONTAINER_NAME psql -U postgres -c \"\du\"

            # 7.4.6 - Nettoyage
            echo \"[INFO - 7.4.6] Nettoyage...\"
            rm init_database.sql
            docker exec $POSTGRES_CONTAINER_NAME rm /tmp/init_database.sql 
            
            # 7.4.7 - Si c'est l'environnement de production, restaurer la base de données depuis le backup
              if [ \"$ENV\" == \"prod\" ]; then
                  echo \"[INFO - 7.4.7] Restauration de la base de données...\"
                  BACKUP_FILE=\"/home/$SSH_USER/backups/prod_backup_latest.sql\"
                  if [ -f \"$BACKUP_FILE\" ]; then
                      echo \"Fichier de backup trouvé. Copie dans le conteneur PostgreSQL...\"
                      docker cp $BACKUP_FILE $POSTGRES_CONTAINER_NAME:/tmp/prod_backup_latest.sql
                      docker exec -i $POSTGRES_CONTAINER_NAME psql -U postgres -d $DB_NAME < /tmp/prod_backup_latest.sql
                      echo \"Restauration terminée avec succès.\"
                  else
                      echo \"[WARNING] Fichier de backup introuvable : $BACKUP_FILE. La restauration est ignorée.\"
                  fi
              else
                  echo \"Environnement non-production détecté : aucune restauration nécessaire.\"
              fi
          "

          # Étape finale - Confirmation de la réussite
          echo \"[SUCCESS] Étape 7 terminée avec succès.\"

      - name: 8 - Déployer le conteneur Backend
        run: |
          ssh -p $SSH_PORT -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i /tmp/git_id_rsa $SSH_USER@$SERVER_IP "
          set -e
          echo '===================================' | tee -a $LOG_FILE
          echo '[INFO - Étape 8.1] Début du déploiement du backend...' | tee -a $LOG_FILE

          # 8.2 - Vérification des variables d'environnement
          echo '[INFO - Étape 8.2] Vérification des variables d'environnement...' | tee -a $LOG_FILE
          DATABASE_URL=\"postgresql://$DB_USERNAME:$DB_PASSWORD@$DB_HOST:$DB_PORT_INT/$DB_NAME\"
          MANDATORY_VARS=(ENV DB_NAME DB_USERNAME DB_PASSWORD DB_HOST DATABASE_URL MOUNT_PATH CONTAINER_NAME DB_PORT_INT DB_PORT_EXT BACKEND_PORT NETWORK JWT_SECRET)
          for VAR in \"${MANDATORY_VARS[@]}\"; do
            if [ -z \"\${!VAR}\" ]; then
              echo \"[ERROR] La variable $VAR est manquante ou vide.\" | tee -a $LOG_FILE
              exit 1
            fi
            echo \"[INFO] $VAR=\${!VAR}\" | tee -a $LOG_FILE
          done

          # Étape 8.3 - Création dynamique du fichier .env
          echo '[INFO - Étape 8.3] Création dynamique du fichier .env...' | tee -a $LOG_FILE
          cat <<EOF > $MOUNT_PATH/.env
          DATABASE_URL=$DATABASE_URL
          NODE_ENV=$ENV
          JWT_SECRET=$JWT_SECRET
          SERVER_PORT=$BACKEND_PORT
          EOF

          if [ -f \"$MOUNT_PATH/.env\" ]; then
            echo '[INFO] Fichier .env créé avec succès.' | tee -a $LOG_FILE
          else
            echo '[ERROR] Échec de la création du fichier .env.' | tee -a $LOG_FILE
            exit 1
          fi

          # Étape 8.4 - Suppression de l'ancien conteneur si nécessaire
          echo '[INFO - Étape 8.4] Vérification et suppression de l’ancien conteneur...' | tee -a $LOG_FILE
          if docker ps -a --filter \"name=$CONTAINER_NAME\" --format '{{.Names}}' | grep -w $CONTAINER_NAME; then
            echo '[INFO] Suppression de l’ancien conteneur : $CONTAINER_NAME' | tee -a $LOG_FILE
            docker stop $CONTAINER_NAME
            docker rm $CONTAINER_NAME
          fi

          # Étape 8.5 - Lancer un nouveau conteneur backend
          echo '[INFO - Étape 8.5] Lancement du conteneur backend...' | tee -a $LOG_FILE
          docker run -d --name $CONTAINER_NAME \
            --network $NETWORK \
            -v $MOUNT_PATH:/app \
            -w /app \
            -p $BACKEND_PORT:$BACKEND_PORT \
            $DOCKER_NAME || { echo '[ERROR] Échec du démarrage du conteneur.' | tee -a $LOG_FILE; exit 1; }

          echo '[SUCCESS - Étape 8] Déploiement terminé avec succès.' | tee -a $LOG_FILE
          " | tee -a $LOG_FILE

      # Étape 9 - Configurer l'URL Git distante
      - name: 9 - Configurer l'URL Git distante
        run: git remote set-url origin ${{ secrets.GIT_REPO_URL }}

      # Étape 10 - Nettoyage des fichiers temporaires
      - name: Nettoyer les fichiers temporaires
        run: rm -f /tmp/git_id_rsa