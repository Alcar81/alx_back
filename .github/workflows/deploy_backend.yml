name: Deploy Backend

on:
  push:
    branches:
      - master
      - dev

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/master' && 'prod' || 'dev' }}

    steps:
      # Étape 1 - Checkout du dépôt Git
      - name: 1 - Checkout repository
        uses: actions/checkout@v3

      # Étape 2 - Build Docker image for backend
      - name: 2 - Build Docker image
        env:
          DOCKER_NAME: "back_node:latest"
        run: docker build -t $DOCKER_NAME -f Dockerfile.backend .

      # Étape 3 : Push Docker image to registry (optionnel)
      - name: 3 - Push Docker image to registry
        env:
          DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          if [ -n "$DOCKER_REGISTRY" ]; then
            echo "$DOCKER_PASSWORD" | docker login $DOCKER_REGISTRY -u "$DOCKER_USERNAME" --password-stdin
            docker tag back_node:latest $DOCKER_REGISTRY/$DOCKER_USERNAME/back_node:latest
            docker push $DOCKER_REGISTRY/$DOCKER_USERNAME/back_node:latest
          else
            echo "DOCKER_REGISTRY is not defined. Skipping Docker push."
          fi

      # Étape 4 - Start SSH agent and add key
      - name: 4 - Start SSH agent and add key
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          echo "$SSH_PRIVATE_KEY" > /tmp/git_id_rsa
          chmod 600 /tmp/git_id_rsa
          eval $(ssh-agent -s)
          ssh-add /tmp/git_id_rsa

      # Étape 5 - Deploy PostgreSQL container
      - name: 5 - Deploy PostgreSQL container
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
          SSH_USER: ${{ secrets.SSH_USER }}
          POSTGRES_CONTAINER_NAME: "${{ github.ref == 'refs/heads/master' && 'postgres_prod' || 'postgres_dev' }}"
          POSTGRES_IMAGE: postgres:13
          POSTGRES_VOLUME: "${{ github.ref == 'refs/heads/master' && 'postgres_data_prod' || 'postgres_data_dev' }}"
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_PORT_INT: 5432
          DB_PORT_EXT: ${{ env.DB_PORT_EXT }}
          NETWORK: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' && 'prod_network' || 'dev_network' }}
        run: |
          ssh -p $SSH_PORT -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i /tmp/git_id_rsa $SSH_USER@$SERVER_IP "
            docker volume create $POSTGRES_VOLUME || true &&
            docker pull $POSTGRES_IMAGE &&
            docker stop $POSTGRES_CONTAINER_NAME || true &&
            docker rm $POSTGRES_CONTAINER_NAME || true &&
            docker run -d --name $POSTGRES_CONTAINER_NAME \
              --network $NETWORK \
              -e POSTGRES_USER=$DB_USERNAME \
              -e POSTGRES_PASSWORD=$DB_PASSWORD \
              -e POSTGRES_DB=$DB_NAME \
              -v $POSTGRES_VOLUME:/var/lib/postgresql/data \
              -p $DB_PORT_EXT:$DB_PORT_INT \
              $POSTGRES_IMAGE &&
            docker exec $POSTGRES_CONTAINER_NAME sh -c \"
              echo 'DO \$\$ 
              BEGIN 
                IF NOT EXISTS (SELECT 1 FROM pg_roles WHERE rolname = ''$DB_USERNAME'') THEN 
                  CREATE ROLE \\\"$DB_USERNAME\\\" LOGIN PASSWORD ''$DB_PASSWORD''; 
                END IF; 
                IF NOT EXISTS (SELECT 1 FROM pg_database WHERE datname = ''$DB_NAME'') THEN 
                  CREATE DATABASE \\\"$DB_NAME\\\"; 
                  GRANT ALL PRIVILEGES ON DATABASE \\\"$DB_NAME\\\" TO \\\"$DB_USERNAME\\\"; 
                END IF; 
              END 
              \$\$;' > /temp.sql &&
              psql -U postgres -f /temp.sql &&
              rm /temp.sql
            \"
          "

      # Étape 6 - Deploy Backend container
      - name: 6 - Deploy Backend container
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
          SSH_USER: ${{ secrets.SSH_USER }}
          CONTAINER_NAME: "${{ github.ref == 'refs/heads/master' && 'back_node_prod' || 'back_node_dev' }}"
          DATABASE_HOST: "${{ github.ref == 'refs/heads/master' && 'postgres_prod' || 'postgres_dev' }}"          
          DB_PORT_EXT: ${{ env.DB_PORT_EXT }}
          DATABASE_URL: "postgresql://${{ secrets.DB_USERNAME }}:${{ secrets.DB_PASSWORD }}@${DATABASE_HOST}:${DB_PORT_EXT}/${{ secrets.DB_NAME }}"
          NETWORK: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' && 'prod_network' || 'dev_network' }}
          PORT: ${{ secrets.PORT }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        run: |
          ssh -p $SSH_PORT -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i /tmp/git_id_rsa $SSH_USER@$SERVER_IP "
            docker stop $CONTAINER_NAME || true &&
            docker rm $CONTAINER_NAME || true &&
            docker run -d --name $CONTAINER_NAME \
              --network $NETWORK \
              -e DATABASE_URL=$DATABASE_URL \
              -e NODE_ENV=${{ github.ref == 'refs/heads/master' && 'prod' || 'dev' }} \
              -e JWT_SECRET=$JWT_SECRET \
              -p $PORT:7000 \
              $DOCKER_REGISTRY/$DOCKER_USERNAME/back_node:latest
          "

      # Étape 7 - Set Remote Git URL (si nécessaire)
      - name: 7 - Set Remote Git URL
        env:
          GIT_REPO_URL: ${{ secrets.GIT_REPO_URL }}
        run: git remote set-url origin $GIT_REPO_URL
