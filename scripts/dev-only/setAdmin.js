const { PrismaClient } = require("@prisma/client");
const bcrypt = require("bcryptjs");

const prisma = new PrismaClient();

const [,, email = "", role = "ADMIN"] = process.argv;

if (!email || !role) {
  console.error("‚ùå Usage : node setAdmin.js <email> <role>");
  process.exit(1);
}

(async () => {
  try {
    // üîç V√©rifier si l'utilisateur existe
    let user = await prisma.user.findUnique({ where: { email: email.toLowerCase() } });

    if (!user) {
      const defaultPassword = "Fake1234!";
      const hashed = await bcrypt.hash(defaultPassword, 10);
      user = await prisma.user.create({
        data: {
          email: email.toLowerCase(),
          password: hashed,
          firstName: "Test",
          lastName: "Admin",
        },
      });
      console.log(`üÜï Utilisateur ${email} cr√©√© avec le mot de passe : ${defaultPassword}`);
    }

    // üîç V√©rifier si le r√¥le existe dans la table Role
    const roleRecord = await prisma.role.findUnique({
      where: {
        name: role.toUpperCase(),
      },
    });

    if (!roleRecord) {
      throw new Error(`‚ùå Le r√¥le '${role}' n'existe pas dans la table Role.`);
    }

    // üîç V√©rifier si l'association UserRole existe d√©j√†
    const existingRole = await prisma.userRole.findFirst({
      where: {
        userId: user.id,
        roleId: roleRecord.id,
      },
    });

    if (existingRole) {
      console.log(`‚ÑπÔ∏è L'utilisateur poss√®de d√©j√† le r√¥le '${role.toUpperCase()}'`);
    } else {
      await prisma.userRole.create({
        data: {
          userId: user.id,
          roleId: roleRecord.id,
        },
      });
      console.log(`‚úÖ R√¥le '${role.toUpperCase()}' attribu√© √† ${email}`);
    }

    console.log("üéâ Op√©ration termin√©e avec succ√®s.");
  } catch (err) {
    console.error("‚ùå Erreur :", err.message);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
})();
