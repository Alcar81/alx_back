    DATABASE_URL=postgresql://usr_db_dev:dw33kMyiQvNL62p3aCjd@postgres_dev:5432/postgres_dev
    NODE_ENV=dev
    APP_ENV=dev
    APP_NAME=alxmultimedia_backend
    JWT_SECRET=e9rd4YaKGig9S2ZoIpXW
    SERVER_PORT=7001
    PORT=7001
    REACT_APP_API_URL=https://dev.alxmultimedia.com/api
    TRUST_PROXY=1
    LOG_LEVEL=info
    ENABLE_CACHE=false
  EOT

  # 8.3 - Nettoyage des logs existants
  echo "[INFO - 8.3] Nettoyage des anciens logs..."
  mkdir -p "/home/dev.alxmultimedia.com/backend/logs"
  rm -f "/home/dev.alxmultimedia.com/backend/logs/*" || echo "[WARNING] Aucune log à supprimer"
  find "/home/dev.alxmultimedia.com/backend/logs/" -type f -name "*.log" -mtime +7 -exec rm -f {} \; || true

  # 8.4 - Suppression de l’ancien conteneur backend
  echo "[INFO - 8.4] Suppression de l'ancien conteneur (si présent)..."
  if docker ps -a --filter "name=back_node_dev" --format '{{.Names}}' | grep -w "back_node_dev"; then
    docker stop "back_node_dev" || true
    docker rm "back_node_dev" || true
  fi

  # 8.5 - Démarrage du nouveau conteneur backend
  echo "[INFO - 8.5] Lancement du nouveau conteneur..."
  docker run -d --name "back_node_dev"     --network "network_dev"     -v "/home/dev.alxmultimedia.com/backend:/app"     -w /app     --env-file "/home/dev.alxmultimedia.com/backend/.env"     -p "127.0.0.1:7001:7001"     node:20     tail -f /dev/null

  # 8.6 - Installation des dépendances
  echo "[INFO - 8.6] Installation des dépendances backend..."
  docker exec "back_node_dev" npm install --omit=dev --loglevel=warn
  docker exec "back_node_dev" npm install node-fetch@2
  docker exec "back_node_dev" apt-get update
  docker exec "back_node_dev" apt-get install -y wget curl net-tools tzdata nano

  # 8.7 - Configuration du fuseau horaire
  echo "[INFO - 8.7] Configuration du fuseau horaire..."
  docker exec "back_node_dev" ln -sf /usr/share/zoneinfo/America/Montreal /etc/localtime
  docker exec "back_node_dev" dpkg-reconfigure -f noninteractive tzdata

  # 8.8 - Génération de Prisma et build
  echo "[INFO - 8.8] Génération du client Prisma et build..."
  docker exec "back_node_dev" npx prisma generate
  docker exec "back_node_dev" npm run build || echo "[INFO] Aucun build requis ou échec non bloquant"

  # 8.9 - Démarrage de l'application backend
  echo "[INFO - 8.9] Démarrage de l'application backend..."
  docker exec -d "back_node_dev" npm start

  # 8.10 - Vérification du statut du conteneur
  echo "[INFO - 8.10] Vérification du conteneur backend..."
  if docker ps --filter "name=back_node_dev" --filter "status=running" | grep -w "back_node_dev"; then
    echo "[SUCCESS - 8.10] ✅ Le conteneur backend est actif"
  else
    echo "[ERROR - 8.10] ❌ Le conteneur backend n’est pas en marche." >&2
    docker logs "back_node_dev"
    exit 1
  fi

  # 8.11 - Attente que le port soit ouvert
  echo "[INFO - 8.11] Attente de l’ouverture du port 7001..."
  PORT_OK=0
  for i in {1..60}; do
    if docker exec "back_node_dev" netstat -tln | grep -q ":7001"; then
      echo "[SUCCESS - 8.11] ✅ Le port 7001 est actif"
      PORT_OK=1
      break
    fi
    echo "[WAITING - 8.11] Tentative /60..."
    sleep 1
  done

  if [ "" -eq 0 ]; then
    echo "[WARNING - 8.11] ❌ Le port 7001 ne s’est pas ouvert après 60 secondes."
    echo "[INFO] Le déploiement se poursuit pour inspection des logs."
  fi

  echo "[INFO - 8.12] Fin de l’étape 8 - Backend démarré"
